// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TestEventHelper struct{ Stackid uint32 }

// LoadTest returns the embedded CollectionSpec for Test.
func LoadTest() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TestBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Test: %w", err)
	}

	return spec, err
}

// LoadTestObjects loads Test and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TestObjects
//	*TestPrograms
//	*TestMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTestObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTest()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TestSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestSpecs struct {
	TestProgramSpecs
	TestMapSpecs
	TestVariableSpecs
}

// TestProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestProgramSpecs struct {
	HelperGetStack *ebpf.ProgramSpec `ebpf:"helper_get_stack"`
	ManualGetStack *ebpf.ProgramSpec `ebpf:"manual_get_stack"`
}

// TestMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestMapSpecs struct {
	EventRingbuf  *ebpf.MapSpec `ebpf:"event_ringbuf"`
	PrintStackMap *ebpf.MapSpec `ebpf:"print_stack_map"`
}

// TestVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TestVariableSpecs struct {
	*ebpf.VariableSpec `ebpf:"__"`
}

// TestObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestObjects struct {
	TestPrograms
	TestMaps
	TestVariables
}

func (o *TestObjects) Close() error {
	return _TestClose(
		&o.TestPrograms,
		&o.TestMaps,
	)
}

// TestMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestMaps struct {
	EventRingbuf  *ebpf.Map `ebpf:"event_ringbuf"`
	PrintStackMap *ebpf.Map `ebpf:"print_stack_map"`
}

func (m *TestMaps) Close() error {
	return _TestClose(
		m.EventRingbuf,
		m.PrintStackMap,
	)
}

// TestVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestVariables struct {
	*ebpf.Variable `ebpf:"__"`
}

// TestPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTestObjects or ebpf.CollectionSpec.LoadAndAssign.
type TestPrograms struct {
	HelperGetStack *ebpf.Program `ebpf:"helper_get_stack"`
	ManualGetStack *ebpf.Program `ebpf:"manual_get_stack"`
}

func (p *TestPrograms) Close() error {
	return _TestClose(
		p.HelperGetStack,
		p.ManualGetStack,
	)
}

func _TestClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed test_x86_bpfel.o
var _TestBytes []byte
